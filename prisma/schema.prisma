// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Account {
   id                 String  @id @default(cuid())
   userId             String
   type               String
   provider           String
   providerAccountId  String
   refresh_token      String? @db.Text
   access_token       String? @db.Text
   expires_at         Int?
   token_type         String?
   scope              String?
   id_token           String? @db.Text
   session_state      String?
   oauth_token_secret String?
   oauth_token        String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
   id            String     @id @unique @default(cuid())
   userType      Role       @default(USER)
   name          String?
   email         String?    @unique
   emailVerified DateTime?
   image         String?
   gameTokens    Int?       @default(1000)
   createdAt     DateTime   @default(now())
   accounts      Account[]
   sessions      Session[]
   // listedHomes   Home[]
   gameState     GameState?
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
}

// model Home {
//    id          String   @id @default(cuid())
//    image       String?
//    title       String
//    description String
//    price       Float
//    guests      Int
//    beds        Int
//    baths       Int
//    createdAt   DateTime @default(now())
//    updatedAt   DateTime @updatedAt
//    owner       User     @relation(fields: [ownerId], references: [id])
//    ownerId     String
// }

model GameState {
   id        String   @id @unique @default(cuid())
   bDie_1    Int
   bDie_2    Int
   bDie_3    Int
   bScore    Int
   pDie_1    Int
   pDie_2    Int
   pDie_3    Int
   pScore    Int
   pBet      Int
   result    String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   User   User?  @relation(fields: [userId], references: [id])
   userId String @unique
}

enum Role {
   USER
   ADMIN
}
